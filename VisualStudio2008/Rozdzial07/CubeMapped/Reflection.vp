// Shader odbicia
// Shader wierzcho³ków
// Richard S. Wright Jr.
// OpenGL. Ksiêga eksperta
#version 130

// Dane wejœciowe wierzcho³ków... po³o¿enie i normalna
in vec4 vVertex;
in vec3 vNormal;

uniform mat4   mvpMatrix;
uniform mat4   mvMatrix;
uniform mat3   normalMatrix;
uniform mat4   mInverseCamera;

// Texture coordinate to fragment program
smooth out vec3 vVaryingTexCoord;

void main(void) 
    {
    // Normalna w przestrzeni oka
    vec3 vEyeNormal = normalMatrix * vNormal;
    
    // Po³o¿enie wierzcho³ka w przestrzeni oka
    vec4 vVert4 = mvMatrix * vVertex;
    vec3 vEyeVertex = normalize(vVert4.xyz / vVert4.w);
    
    // Obliczenie wektora odbicia
    vec4 vCoords = vec4(reflect(vEyeVertex, vEyeNormal), 1.0);
   
    // Obrót przez przekrêcon¹ kamerê
    vCoords = mInverseCamera * vCoords;
    vVaryingTexCoord.xyz = normalize(vCoords.xyz);

    // Przekszta³cenie geometrii
    gl_Position = mvpMatrix * vVertex;
    }
